/* Бурдинская Наталья Задача 136в
*  Даны натуральное число n, действительные числа a1,..., an. 
*  Вычислить: в) |a1| + ... + |an|
*/
#include <stdlib.h> // динамического управления памятью, генерации случайных чисел srand и rand
#include <time.h> // объявляет набор функций, макросов и типов для работы с датой и временем
#include <math.h> // модуль с математическими константами и функциями - fabs ...
#include <cassert>  // для assert
#include <iostream> // Объявляет объекты cin cout, управляющие чтением из стандартных потоков и записью в них.
#include <iomanip> // стандартный для определения нужного числа манипуляторов setw setprecision.
using namespace std; // теперь можно обращаться ко всем именам, описанным в std, непосредственно, без префикса std::

// функция выделение памяти для массива N, n – формальный параметр
//
float* Memo_Mass(unsigned n) // * объявляет указатель на тип float
{
	float* a = new float [n]{0}; // динамический массив размерность n, инициализация всего массива нулями
	return a; // возврат массива А из функции Memo_Mass
}

// процедура ввода массива N
// Динамические массивы в функции передаются как указатели *. При этом нужно передавать размер через отдельный параметр (n).
void Vvod_Mass(float* a, unsigned n)
{
	// заполнение массива случайными числами от -100 до 100 включительно
    for (unsigned i = 0; i < n; ++i) // нумерация с нуля до n-1
	{
        a[i] = 1.0 * rand() / RAND_MAX * 200 - 100;
        // домножение на 1.0 нужно для того, чтобы выражение вычислялось           по правилам вещественной арифметики, не целочисленной
        // rand() возвращает случайное целое число от 0 до RAND_MAX
    }
}

// процедура вывода на экран массива N
void Screen_Mass(float* a, unsigned n) 
{
	for (unsigned i = 0; i < n; i++) 
	{
      cout << "a[" << i << "] = " << a[i] << " ";
	}
	cout << "\n";
}

// функция суммы |a1| + ... + |an| массива N
float Sum_Mass(float* a, unsigned n)
{
	float sum = 0; // определение переменной (объявление + инициализация)
    for (unsigned i = 0; i < n; ++i) {
      sum = sum + fabs(a[i]); 
    }
	return sum;
}

// проверка работы функции Sum_Mass на разных входных данных
float Test_Sum_Mass()
{
   float* b = new float [3]{0}; // динамический массив размерность 3, инициализация всего массива нулями
   b[0]=0; b[1]=1; b[2]=2; // |b0| + |b1| + |b2| = 0 + 1 + 2 = 3
   assert( Sum_Mass ( b, 3) == 3);  // если внутри оператора assert будет ЛОЖЬ, то программа аварийно завершит работу
   b[0]=2; b[1]=2; b[2]=2; // |b0| + |b1| + |b2| = 2 + 2 + 2 = 6
   assert( Sum_Mass ( b, 3) == 6);
   cout << "test Sum_Mass - OK" << endl;
   delete[] b; // после окончания работы c массивом обязательно освобождаем его память
   return 0;
}

// функция освобождение памяти массива N
void Del_Mass(float* a)
{
   delete[] a;
}

// тело основной программы
int main()
{
	unsigned n = 0; // определение переменной (объявление + инициализация)
	setlocale(0, "Russian"); // руссификатор
	// Сочетание srand (time (NULL)) устанавливает в качестве базы текущее время.
    // Этот прием часто используется для того, чтобы при разных запусках генератора псевдослучайных чисел
    // была всякий раз разная база и, соответственно, разный ряд получаемых значений.
    // Генерирует случайное число, используя текущею дату, как параметр, как бы для непредсказуемости результата.
    srand(time(NULL)); // инициализация генератора случайных чисел текущим временем в секундах time

    cout << "Calculate: |a1| + ... + |an| \n";
    cout << " n = ";
    cin >> n; 
    cout << "\n";
	
	// вызвать в программе один раз, перед выводом чисел.
	cout << setw(10) << fixed << setprecision(2); // 10 позиций на всё число, два знака после запятой.
	
	float* f = Memo_Mass(n); // выделение памяти для массива N, n – фактический параметр
	cout << "Zero Massiv a1,..., an \n"; 
	Screen_Mass(f, n); // выводим на экран нулевой массив
	
    cout << "Vvod Massiv a1,..., an \n"; 
	Vvod_Mass(f, n); // выполняем ввод массива
	Screen_Mass(f, n); // выводим на экран введенный массив 
	
	// проверка работы функции Sum_Mass на разных входных данных через ASSERT
	Test_Sum_Mass();
	
	cout << "Answer:" << endl;
	// вызов функции Sum_Mass, расчёт суммы |a1| + ... + |an| массива N, вывод результа на экран
    cout << "|a1| + ... + |an| = " << Sum_Mass(f, n) << endl;
    
	Del_Mass(f); // после окончания работы c массивом обязательно освобождаем его память
	return 0;
}
// справка по модулю time http://cppstudio.com/cat/309/326/
// справка по функции rand https://ru.cppreference.com/w/c/numeric/random/rand
