/// \file Matrix.cpp
/// \brief тело основной программы
/// \brief доступ к отдельным элементам матрицы
/// \brief заполнение матрицы одним значением
/// \brief заполнение матрицы случайными числами
/// \brief сложение и вычитание матриц (использовать оператор)
/// \brief умножение на число
/// \brief умножение матрицы на матрицу
/// \brief транспонирование
/// \brief создание диагональной матрицы
/// \brief вычисление определителя
/// \brief вычисление обратной матрицы
/// \brief доступ к строкам матрицы
/// \brief Операторы *=, -=, +=
/// \brief применения функции к элементам матрицы
/// \brief 
/// \brief оформлен через модуль из трёх файлов
/// \brief создан репозиторий в GitHub 
/// \brief созданы 4 геттера и 4 сеттера
/// \author Бурдинская Наталья ВМК-22
/// \date 15.11.2023

// вызов заголовочного файла модуля MatrixModul.cpp
#include "MatrixModul.h"

//главная функция, вызываемая при запуске программы
int main()
{
    // Функция setlocale задаёт локализацию программы. 
    // LC_ALL указывает программе, что локализированы будут все функции.
    // «Rus» локализация произойдёт на русский язык
    setlocale(LC_ALL, "Russian");
    // вызвать в программе один раз, перед выводом чисел.
    cout << fixed << setprecision(2); // один знак после запятой

    MatrixClass Test(3, 3), Test1(3, 3), Test2(3, 3), Test3(3, 3), Test4(3, 3), Test5(3, 3);
   
    // Проверка получения количества строк и столбцов
    assert(Test.Get_Line() == 3 && Test.Get_Column() == 3);

    cout << "============================================" << endl;
    cout << "Test Матрица с одним значением = 5" << endl;
    Test.Matrix_Default(5); // Операция: заполнение матрицы одним значением 5 
    Test.Get_Matrix(); // получаем матрицу описанную как Test
    cout << endl;

    // Проверка получения конкретного элемента
    assert(Test.Get_Element(2, 2) == 5);

    float a;
    cout << "============================================" << endl;
    cout << "Test1 Матрица с рандомными значениями " << endl;
    Test1.Matrix_Random(10, 30);
    Test1.Get_Matrix(); // получаем матрицу описанную как Test1
    cout << endl;

    // Проверка рандомного заполнения матрицы в промежутке от 10 до 30 вкл
    // проверка по всем элементам матрицы
    for (int i = 0; i < Test1.Get_Line(); i++)
    {
        assert(Test1.Get_Element(0, i) >= 10 && Test1.Get_Element(0, i) <= 30);
    }

    cout << "============================================" << endl;
    a = Test1.Determinant(3); // вычисление определителя матрицы Test1
    cout << "Определитель матрицы Test1 = " << a << endl;;
     cout << endl;

    cout << "============================================" << endl;
    cout << "Test2 Обратная матрица к матрице Test1 " << endl;
    Test2 = Test1.Inverse_Matrix(); // процедура создания обратной матрицы
    Test2.Get_Matrix(); // получаем матрицу описанную как Test2
     cout << endl;

     cout << "============================================" << endl;
     cout << "Test3 Транспонирование матрицы Test1" << endl;
     Test3 = Test1.Trans_Matrix(); // процедура создания транспонированной матрицы
     Test3.Get_Matrix(); // получаем матрицу описанную как Test3
     cout << endl;

     cout << "============================================" << endl;
     cout << "Test4 Диагональная матрица к матрице Test1 " << endl;
     Test4 = Test1.Diagonal_Matrix(); // процедура создания диагональной матрицы
     Test4.Get_Matrix(); // получаем матрицу описанную как Test4
     cout << endl;

// ПРОВЕРКА ОПЕРАТОРОВ
     cout << "============================================" << endl;
     cout << "ПРОВЕРКА ОПЕРАТОРОВ" << endl;
     cout << "============================================" << endl;

     cout << "Операция: сложение матриц Test + Test1" << endl;
     Test5 = Test + Test1;  // применение оператора +
     Test5.Get_Matrix(); // получаем матрицу описанную как Test5
     cout << endl;

     cout << "============================================" << endl;
     cout << "Операция: сложение матрицы с числом Test2 + 2  " << endl;
     Test5 = Test2 + 2;  // применение оператора +
     Test5.Get_Matrix(); // получаем матрицу описанную как Test5
     cout << endl;

     cout << "============================================" << endl;
     cout << "Операция: вычитание матриц Test1 - Test" << endl;
     Test5 = Test1 - Test;  // применение оператора -
     Test5.Get_Matrix(); // получаем матрицу описанную как Test5
     cout << endl;

     cout << "============================================" << endl;
     cout << "Операция: вычитание из матрицы числа Test2 - 2" << endl;
     Test5 = Test2 - 2; // применение оператора -
     Test5.Get_Matrix(); // получаем матрицу описанную как Test5
     cout << endl;

     cout << "============================================" << endl;
     cout << "Операция: умножение матрицы на число Test * 3" << endl;
     Test5 = Test * 3;  // применение оператора *
     Test5.Get_Matrix(); // получаем матрицу описанную как Test5
     cout << endl;

     cout << "============================================" << endl;
     cout << "Операция: умножение матрицы на матрицу Test * Test1" << endl;
     Test5 = Test * Test1; // применение оператора *
     Test5.Get_Matrix(); // получаем матрицу описанную как Test5
     cout << endl;

     cout << "============================================" << endl;
     cout << "ООперация: собственное умножение матрицы на матрицу Test * Test" << endl;
     Test *= Test;  // применение оператора *=
     Test.Get_Matrix(); // получаем матрицу описанную как Test
     cout << endl;

     cout << "============================================" << endl;
     cout << "Операция: собственное умножение матрицы на число Test * 2" << endl;
     Test *= 2; // применение оператора *=
     Test.Get_Matrix(); // получаем матрицу описанную как Test
     cout << endl;

     cout << "============================================" << endl;
     cout << "Операция: собственное вычитание матриц Test - Test" << endl;
     Test -= Test; // применение оператора -=
     Test.Get_Matrix(); // получаем матрицу описанную как Test
     cout << endl;

     cout << "============================================" << endl;
     cout << "Операция: собственное вычитание числа из матрицы Test1 - 10" << endl;
     Test1 -= 10; // применение оператора -=
     Test1.Get_Matrix(); // получаем матрицу описанную как Test1
     cout << endl;

     cout << "============================================" << endl;
     cout << "Операция: собственное сложение матриц Test1 + Test1" << endl;
     Test1 += Test1; // применение оператора +=
     Test1.Get_Matrix(); // получаем матрицу описанную как Test1
     cout << endl;

     cout << "============================================" << endl;
     cout << "Операция: собственное сложение числа с матрицей Test1 + 2" << endl;
     Test1 += 2; // применение оператора +=
     Test1.Get_Matrix(); // получаем матрицу описанную как Test1
     cout << endl;
}
